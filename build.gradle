plugins {
    id "eclipse"
    id "idea"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "[6.0, 6.2]"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
}

version = "${mc_version}-${mod_version}"
group = "com.st0x0ef.won_skills"
archivesBaseName = "won_skills"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    runs {
        client {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", "won_skills"

            mods {
                won_skills {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", "won_skills"

            mods {
                won_skills {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", "won_skills"

            mods {
                won_skills {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            args "--mod", "won_skills", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                won_skills {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "won_skills",
                "Specification-Vendor"    : "St0x0ef",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : "St0x0ef",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

jar.finalizedBy("reobfJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_version: mod_version, mc_version: mc_version, forge_version: forge_version, loader_version: loader_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put "project", project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}